1. Project Setup
Folder Structure

Frontend: React (stayfinder-frontend)

Backend: Node.js/Express (stayfinder-backend)

Database: MongoDB

Initialization

Ran npx create-react-app stayfinder-frontend

Ran npm init -y in stayfinder-backend

Installed Packages

Frontend: react-router-dom, tailwindcss, etc.

Backend: express, mongoose, cors, dotenv, bcrypt, jsonwebtoken, nodemon

2. Backend Setup (stayfinder-backend)
Models (using Mongoose)

User.js – handles user registration and login

Listing.js – stores listing details

Booking.js – handles booking data

Authentication Routes

POST /api/auth/register – user registration

POST /api/auth/login – user login

Implemented JWT-based authentication using authMiddleware.js

Listings Routes

GET /api/listings – fetch all listings

GET /api/listings/:id – fetch a listing by ID

POST /api/listings – create a new listing

PUT /api/listings/:id – update a listing

DELETE /api/listings/:id – delete a listing

Bookings Routes

POST /api/bookings – create a reservation

Implemented date conflict validation to prevent overlapping bookings

3. Frontend Setup (stayfinder-frontend)
Pages and Components

Home.js – displays all listings with search and filters

ListingDetails.js – displays full listing information and booking form

Login.js and Register.js – forms for authentication

Navbar.js – navigation menu with links

HostDashboard.js – shows listings created by the logged-in user

Features Implemented

Search with filters (location and price)

Login and Register with JWT

Conditional rendering based on user authentication

Booking form with date selection and booking submission

4. Optional Features (Bonus)
Started integrating Mapbox but later removed due to compatibility issues

Stripe or mock payment integration was planned for future implementation
